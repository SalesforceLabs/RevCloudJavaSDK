/**
 * ${api}.java
 *
 * API client for ${api}
 * Do NOT edit as this is generated by APIGenerator
 */
package $package;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.salesforce.revcloud.ApiContext;
import com.salesforce.revcloud.api.*;
import com.salesforce.revcloud.api.response.ApiResponse;
import com.salesforce.revcloud.api.serializer.DateSerializer;
import com.salesforce.revcloud.api.SObject;
import org.cometd.bayeux.Message;
import org.eclipse.jetty.http.HttpMethod;
import ${package}.response.${api}Response;
#if ($hasTypes)
import ${package}.type.*;
#end
#if ($event)
import ${package}.event.*;
#end

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @author kzheng
 * @since 1/5/2021
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ${api} extends ${baseApi} {

    public ${api}(ApiContext apiContext) {
        super(apiContext);
    }

    #foreach($field in ${inputFields})
    private ${field.type} ${field.name};
    #end

    #foreach($field in ${inputFields})
    #if ($field.type == 'Date')
    @JsonSerialize(using = DateSerializer.class)
    #end
    public ${field.type} get${field.capitalized}() {
        return this.${field.name};
    }

    public ${api} set${field.capitalized}(${field.type} ${field.name}) {
        this.${field.name} = ${field.name};
        return this;
    }

    #end
    @Override
    protected String getEndpoint() {
        return replaceUriParameters("$endpoint");
    }

    @Override
    protected HttpMethod getMethod() {
        return $method;
    }

    @Override
    protected String getEventType() {
    #if ($event)
        return "${event.name}";
    #else
        return null;
    #end
    }

    @Override
    protected ApiResponse createApiResponse(String action, boolean isSuccess, List<Object> errors, String requestId, Map<String, Object> outputValues) {
        ${apiResponse} response = new ${apiResponse}(action, isSuccess, errors, requestId);
        response.setApiOutput(outputValues);
        #foreach($field in ${outputFields})
        #if ($field.type == 'Date')
        String ${field.name}Date = (String)outputValues.get("${field.name}");
        if (${field.name}Date != null){
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
            try {
                response.set${field.capitalized}(format.parse(${field.name}Date));
            } catch (ParseException e) {
                throw new RuntimeException("Invalid ${field.name} received: " + ${field.name}Date);
            }
        }
        #elseif ($field.type == 'SObject')
        response.set${field.capitalized}(deserializeSObject(outputValues.get("${field.name}")));
        #else
        response.set${field.capitalized}((${field.type})outputValues.get("${field.name}"));
        #end
        #end
        return response;
    }

    @Override
    protected void onMessage(Message message) {
        #if ($event)
        Map<String, Object> payload = getMessagePayload(message);
        ${apiResponse} apiResponse = getApiResponse();
        ${populateEventCode}
        apiResponse.set${event.name}(${event.getCamelCaseName()});
        #end
    }
}
