/**
 * ApplyPayment.java
 *
 * API client for ApplyPayment
 * Do NOT edit as this is generated by APIGenerator
 */
package com.salesforce.revcloud.api.generated;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.salesforce.revcloud.ApiContext;
import com.salesforce.revcloud.api.*;
import com.salesforce.revcloud.api.response.ApiResponse;
import com.salesforce.revcloud.api.serializer.DateSerializer;
import com.salesforce.revcloud.api.SObject;
import org.cometd.bayeux.Message;
import org.eclipse.jetty.http.HttpMethod;
import com.salesforce.revcloud.api.generated.response.ApplyPaymentResponse;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @author kzheng
 * @since 1/5/2021
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ApplyPayment extends AbstractApi {

    public ApplyPayment(ApiContext apiContext) {
        super(apiContext);
    }

    private Double amount;
    private String appliedToId;
    private String paymentId;
    private Date effectiveDate;
    private String comments;
    private String associatedAccountId;

    public Double getAmount() {
        return this.amount;
    }

    public ApplyPayment setAmount(Double amount) {
        this.amount = amount;
        return this;
    }

    public String getAppliedToId() {
        return this.appliedToId;
    }

    public ApplyPayment setAppliedToId(String appliedToId) {
        this.appliedToId = appliedToId;
        return this;
    }

    public String getPaymentId() {
        return this.paymentId;
    }

    public ApplyPayment setPaymentId(String paymentId) {
        this.paymentId = paymentId;
        return this;
    }

    @JsonSerialize(using = DateSerializer.class)
    public Date getEffectiveDate() {
        return this.effectiveDate;
    }

    public ApplyPayment setEffectiveDate(Date effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }

    public String getComments() {
        return this.comments;
    }

    public ApplyPayment setComments(String comments) {
        this.comments = comments;
        return this;
    }

    public String getAssociatedAccountId() {
        return this.associatedAccountId;
    }

    public ApplyPayment setAssociatedAccountId(String associatedAccountId) {
        this.associatedAccountId = associatedAccountId;
        return this;
    }

    @Override
    protected String getEndpoint() {
        return replaceUriParameters("/actions/standard/applyPayment");
    }

    @Override
    protected HttpMethod getMethod() {
        return HttpMethod.POST;
    }

    @Override
    protected String getEventType() {
        return null;
    }

    @Override
    protected ApiResponse createApiResponse(String action, boolean isSuccess, List<Object> errors, String requestId, Map<String, Object> outputValues) {
        ApplyPaymentResponse response = new ApplyPaymentResponse(action, isSuccess, errors, requestId);
        response.setApiOutput(outputValues);
        response.setPaymentLineInvoiceId((String)outputValues.get("paymentLineInvoiceId"));
        String appliedDateDate = (String)outputValues.get("appliedDate");
        if (appliedDateDate != null){
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
            try {
                response.setAppliedDate(format.parse(appliedDateDate));
            } catch (ParseException e) {
                throw new RuntimeException("Invalid appliedDate received: " + appliedDateDate);
            }
        }
        return response;
    }

    @Override
    protected void onMessage(Message message) {
    }
}
