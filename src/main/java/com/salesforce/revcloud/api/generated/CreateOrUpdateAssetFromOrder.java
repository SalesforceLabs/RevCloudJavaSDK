/**
 * CreateOrUpdateAssetFromOrder.java
 *
 * API client for CreateOrUpdateAssetFromOrder
 * Do NOT edit as this is generated by APIGenerator
 */
package com.salesforce.revcloud.api.generated;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.salesforce.revcloud.ApiContext;
import com.salesforce.revcloud.api.*;
import com.salesforce.revcloud.api.response.ApiResponse;
import com.salesforce.revcloud.api.serializer.DateSerializer;
import com.salesforce.revcloud.api.SObject;
import org.cometd.bayeux.Message;
import org.eclipse.jetty.http.HttpMethod;
import com.salesforce.revcloud.api.generated.response.CreateOrUpdateAssetFromOrderResponse;
import com.salesforce.revcloud.api.generated.event.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @author kzheng
 * @since 1/5/2021
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class CreateOrUpdateAssetFromOrder extends AbstractApi {

    public CreateOrUpdateAssetFromOrder(ApiContext apiContext) {
        super(apiContext);
    }

    private String orderId;

    public String getOrderId() {
        return this.orderId;
    }

    public CreateOrUpdateAssetFromOrder setOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }

    @Override
    protected String getEndpoint() {
        return replaceUriParameters("/actions/standard/createOrUpdateAssetFromOrder");
    }

    @Override
    protected HttpMethod getMethod() {
        return HttpMethod.POST;
    }

    @Override
    protected String getEventType() {
        return "CreateAssetOrderEvent";
    }

    @Override
    protected ApiResponse createApiResponse(String action, boolean isSuccess, List<Object> errors, String requestId, Map<String, Object> outputValues) {
        CreateOrUpdateAssetFromOrderResponse response = new CreateOrUpdateAssetFromOrderResponse(action, isSuccess, errors, requestId);
        response.setApiOutput(outputValues);
        response.setRequestId((String)outputValues.get("requestId"));
        return response;
    }

    @Override
    protected void onMessage(Message message) {
        Map<String, Object> payload = getMessagePayload(message);
        CreateOrUpdateAssetFromOrderResponse apiResponse = getApiResponse();
        CreateAssetOrderEvent createAssetOrderEvent = new CreateAssetOrderEvent();
        createAssetOrderEvent.setCreatedDate((String)payload.get("CreatedDate"));
        createAssetOrderEvent.setCreatedById((String)payload.get("CreatedById"));
        createAssetOrderEvent.setRequestIdentifier((String)payload.get("RequestIdentifier"));
        createAssetOrderEvent.setCorrelationIdentifier((String)payload.get("CorrelationIdentifier"));
        Object[] assetDetailsArray = (Object[])payload.get("AssetDetails");
        if (assetDetailsArray != null) {
            for (Object assetDetailsObj : assetDetailsArray) {
                Map<String, Object> assetDetailsMap = (Map<String, Object>)assetDetailsObj;
                CreateAssetOrderDtlEvent createAssetOrderDtlEvent = new CreateAssetOrderDtlEvent();
        createAssetOrderDtlEvent.setOrderItemId((String)assetDetailsMap.get("OrderItemId"));
        createAssetOrderDtlEvent.setAssetId((String)assetDetailsMap.get("AssetId"));
        createAssetOrderDtlEvent.setIsSuccess((Boolean)assetDetailsMap.get("IsSuccess"));
        createAssetOrderDtlEvent.setErrorCode((String)assetDetailsMap.get("ErrorCode"));
        createAssetOrderDtlEvent.setErrorMessage((String)assetDetailsMap.get("ErrorMessage"));

                createAssetOrderEvent.getAssetDetails().add(createAssetOrderDtlEvent);
            }
        }

        apiResponse.setCreateAssetOrderEvent(createAssetOrderEvent);
    }
}
